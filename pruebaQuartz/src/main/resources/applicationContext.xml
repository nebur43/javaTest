<?xml version="1.0" encoding="UTF-8"?>
<beans 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=" http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
        

	<!-- Enables the Spring MVC @Controller programming model -->
	<!--
	<annotation-driven /> 
	 -->
	
	<!-- Activa  anotaciones para definir los beans de spring -->
	<!-- <context:component-scan base-package="es.ruben.pruebas"/> 
	 --> 
	
	



	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
		<!-- <resources mapping="/resources/**" location="/resources/" />  
		-->
	
	
	<!-- TOMCAT LOCAL -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="${entorno.jndiName}" resource-ref="true"/> 
	 -->
		
	
	<!--
	<tx:annotation-driven transaction-manager="transactionManager" /> 
	 -->
	
	<!--import resource="beans.xml" /-->


<!-- 
*********************** PROPERTIES CONFIGURATION ********************************************************************************************************************************************
 -->

 	<!-- PROPERTIES FILE EXTERNALIZADO LOCAL -->
	<util:properties id="appProperties" location="
		file:C:/properties/Orange/pruebaQuartz.properties
		"
		ignore-resource-not-found="true" />
	<context:property-placeholder properties-ref="appProperties" ignore-unresolvable="true" />





<!-- 
*********************** LOG4J CONFIGURATION ********************************************************************************************************************************************
 ver fichero log4j2.xml 
 -->




<!-- 
*********************** QUARTZ CONFIGURATION ********************************************************************************************************************************************
 -->

<!--  	Quartz doc for Spring 5.1.8
	https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/integration.html#scheduling-quartz
 -->
 
	 <!-- forma1 usando Job y JobDetail (mejor que forma 2)-->
	<bean name="holaMundoForma1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
	    <property name="jobClass" value="es.ruben.pruebas.quartz.HolaMundoQuartzJob"/> <!-- el Job -->
	    <!-- se pueden meter variables de forma opcional -->
	    <property name="jobDataAsMap">
	        <map>
	            <entry key="variablePrueba">
	            	<value>${variablePrueba}</value>
	            </entry>
	        </map>
	    </property>
	</bean>
	
	<!-- forma2 usando MethodInvokingJobDetail -->
	<bean id="holaMundoForma2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="targetObject" ref="holaMundo"/>
	    <property name="targetMethod" value="imprimirHolaMundo"/>
	</bean>

	<bean id="holaMundo" class="es.ruben.pruebas.holamundo.HolaMundo">
	</bean>
	

	<!-- cronTrigger -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="holaMundoForma1"/>
	    <!-- ejecutar cada 5 segundos -->
	    <property name="cronExpression" value="0/5 * * * * ? *"/>
	</bean>
	
	<!-- simpleTrigger -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
	    <!-- see the example of method invoking job above -->
	    <property name="jobDetail" ref="holaMundoForma2"/>
	    <!-- 4 seconds -->
	    <property name="startDelay" value="4000"/>
	    <!-- repeat every 5 seconds -->
	    <property name="repeatInterval" value="3000"/>
	</bean>

	
	<!-- SchedulerFactoryBean -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="cronTrigger"/>
	            <ref bean="simpleTrigger"/>
	        </list>
	    </property>
	</bean>


</beans>